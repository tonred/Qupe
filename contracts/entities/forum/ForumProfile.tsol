pragma ever-solidity ^0.66.0;

pragma AbiHeader time;
pragma AbiHeader expire;
pragma AbiHeader pubkey;

import "../abstract/Profile.tsol";
import "./interfaces/IForumProfile.tsol";
import "./interfaces/IForumUser.tsol";
import "./Forum.tsol";
import "./Message.tsol";
import "./Topic.tsol";


contract ForumProfile is Profile, IForumProfile {
    event React(uint64 serverID, uint64 roomID, uint64 messageID, uint32 reaction, bool undo);
    event ChangeReputation(uint64 serverID, uint64 roomID, uint64 messageID, optional(int8) to);
    event ReputationChanged(uint64 serverID, uint64 roomID, uint64 messageID, address user, int8 change, int64 current);

    // serverID => roomID => messageID => reaction => bool
    mapping(uint64 => mapping(uint64 => mapping(uint64 => mapping(uint32 => bool)))) _reactions;


    function getUserData(uint64 serverID) public view responsible returns (ForumUserData userData) {
        address server = _serverAddress(serverID);
        return {value: 0, flag: MsgFlag.REMAINING_GAS, bounce: false} _getUserData(server);
    }

    function getReactions(uint64 serverID, uint64 roomID, uint64 messageID) public view responsible returns (uint32[] reactions) {
        return {value: 0, flag: MsgFlag.REMAINING_GAS, bounce: false} _reactions[serverID][roomID][messageID].keys();
    }


    function createRoom(
        uint64 serverID,
        address owner,
        TopicInfo info,
        Payment payment
    ) public onlyOwner onlyJoined(serverID, address(0)) {
        require(PaymentLibrary.isJointVault(info.messagePayment, info.highlightMessagePayment), ErrorCodes.NOT_JOINT_VAULT);
        TvmCell params = abi.encode(owner, info);
        _createRoom(serverID, params, payment);
    }

    function changeServerInfo(
        uint64 serverID,
        ForumInfo info
    ) public view minValue(Gas.PROFILE_PROXY_VALUE) onlyOwner {
        _reserve();
        emit ChangeServerInfo(serverID);
        address server = _serverAddress(serverID);
        CallData data = _buildCallData(server, null);
        Forum(server).changeInfo{
            value: 0,
            flag: MsgFlag.ALL_NOT_RESERVED,
            bounce: true
        }(data, info);
    }

    function changeRoomInfo(
        uint64 serverID,
        uint64 roomID,
        TopicInfo info
    ) public view minValue(Gas.PROFILE_PROXY_VALUE) onlyOwner {
        _reserve();
        emit ChangeRoomInfo(serverID, roomID);
        address room = _roomAddress(serverID, roomID);
        CallData data = _buildCallData(room, null);
        Topic(room).changeInfo{
            value: 0,
            flag: MsgFlag.ALL_NOT_RESERVED,
            bounce: true
        }(data, info);
    }

    function react(
        uint64 serverID,
        uint64 roomID,
        uint64 messageID,
        uint32 reaction,
        bool undo
    ) public minValue(Gas.REACT_VALUE) onlyOwner {
        _reserve();
        bool hasReaction = _reactions[serverID][roomID][messageID][reaction];
        require(hasReaction == undo, ErrorCodes.INVALID_REACTION);

        emit React(serverID, roomID, messageID, reaction, undo);
        address message = _messageAddress(serverID, roomID, messageID);
        Message(message).react{
            value: 0,
            flag: MsgFlag.ALL_NOT_RESERVED,
            bounce: true
        }(_owner, reaction, undo);
        if (undo) {
            delete _reactions[serverID][roomID][messageID][reaction];
        } else {
            _reactions[serverID][roomID][messageID][reaction] = true;
        }
    }

    function changeReputation(
        uint64 serverID,
        uint64 roomID,
        uint64 messageID,
        optional(int8) to
    ) public view minValue(Gas.CHANGE_REPUTATION_VALUE) onlyOwner {
        require(!to.hasValue() || math.abs(to.get()) == 1, ErrorCodes.INVALID_REPUTATION_VALUE);
        _reserve();
        emit ChangeReputation(serverID, roomID, messageID, to);
        address message = _messageAddress(serverID, roomID, messageID);
        Message(message).changeReputation{
            value: 0,
            flag: MsgFlag.ALL_NOT_RESERVED,
            bounce: true
        }(_owner, to);
    }

    function onReputationChanged(
        uint64 serverID,
        uint64 roomID,
        uint64 messageID,
        address user,
        int8 change
    ) public override onlyMessage(serverID, roomID, messageID) {
        _reserve();
        address server = _serverAddress(serverID);
        ForumUserData userData = _getUserData(server);
        userData.reputation += change;
        _userDatas[server] = abi.encode(userData);
        int64 current = userData.reputation;
        emit ReputationChanged(serverID, roomID, messageID, user, change, current);
        IForumUser(user).onReputationChanged{
            value: 0,
            flag: MsgFlag.ALL_NOT_RESERVED,
            bounce: false
        }(serverID, change, current);
    }


    function _getUserData(address server) private view returns (ForumUserData) {
        if (!_userDatas.exists(server)) {
            return _defaultUserData();
        } else {
            return abi.decode(_userDatas[server], ForumUserData);
        }
    }

    function _defaultUserData() private pure returns (ForumUserData) {
        return ForumUserData({reputation: 0});
    }

}
