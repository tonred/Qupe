pragma ever-solidity ^0.66.0;

pragma AbiHeader time;
pragma AbiHeader expire;
pragma AbiHeader pubkey;

import "../abstract/Profile.tsol";
import "./interfaces/IForumProfile.tsol";
import "./interfaces/IForumUser.tsol";
import "./Forum.tsol";
import "./Message.tsol";
import "./Topic.tsol";


contract ForumProfile is Profile, IForumProfile {
    event React(uint64 serverID, uint64 roomID, uint64 messageID, uint32 reaction, bool undo);
    event ChangeReputation(uint64 serverID, uint64 roomID, uint64 messageID, int8 change);
    event ReputationChanged(uint64 serverID, uint64 roomID, uint64 messageID, address user, int8 change, int64 current);

    // serverID => roomID => messageID => reaction => bool
    mapping(uint64 => mapping(uint64 => mapping(uint64 => mapping(uint32 => bool)))) _reactions;

    // serverID => roomID => messageID => vote (upvote/downvote)
    mapping(uint64 => mapping(uint64 => mapping(uint64 => int8))) _votes;


    function getUserData(uint64 serverID) public view responsible returns (ForumUserData userData) {
        address server = _serverAddress(serverID);
        return {value: 0, flag: MsgFlag.REMAINING_GAS, bounce: false} _getUserData(server);
    }

    function getReactions(uint64 serverID, uint64 roomID, uint64 messageID) public view responsible returns (uint32[] reactions) {
        return {value: 0, flag: MsgFlag.REMAINING_GAS, bounce: false} _reactions[serverID][roomID][messageID].keys();
    }


    function createRoom(
        uint64 serverID,
        address owner,
        TopicInfo info,
        Payment payment
    ) public onlyOwner onlyJoined(serverID, address(0)) {
        require(PaymentLibrary.isJointVault(info.messagePayment, info.highlightMessagePayment), ErrorCodes.NOT_JOINT_VAULT);
        TvmCell params = abi.encode(owner, info);
        _createRoom(serverID, params, payment);
    }

    function sendMessage(
        uint8 version,
        uint64 serverID,
        uint64 roomID,
        bytes message,
        Tag[] tags,
        optional(uint) replyToMessageHash,
        optional(uint) forwardMessageHash,
        bool highlight,
        Payment payment
    ) public externalMsg onlyJoined(serverID, address(0)) {
        require(version == Constants.MESSAGE_VERSION, ErrorCodes.WRONG_MESSAGE_VERSION);
        if (forwardMessageHash.hasValue()) {
            // forward message doesn't have `message` and `replyToMessageHash`
            require(message.length == 0 && !replyToMessageHash.hasValue(), ErrorCodes.FORWARDED_MESSAGE_WITH_CONTENT);
        }
        tvm.accept();
        TvmCell properties = abi.encode(highlight);
        _sendMessage(serverID, roomID, tags, properties, payment);
    }

    function react(
        uint64 serverID,
        uint64 roomID,
        uint64 messageID,
        uint32 reaction,
        bool undo
    ) public minValue(Gas.REACT_VALUE) onlyOwner onlyJoined(serverID, address(0)) {
        _reserve();
        bool hasReaction = _reactions[serverID][roomID][messageID][reaction];
        require(hasReaction == undo, ErrorCodes.INVALID_REACTION);

        emit React(serverID, roomID, messageID, reaction, undo);
        address message = _messageAddress(serverID, roomID, messageID);
        Message(message).react{
            value: 0,
            flag: MsgFlag.ALL_NOT_RESERVED,
            bounce: true
        }(_owner, reaction, undo);
        if (undo) {
            delete _reactions[serverID][roomID][messageID][reaction];
        } else {
            _reactions[serverID][roomID][messageID][reaction] = true;
        }
    }

    function changeReputation(
        uint64 serverID,
        uint64 roomID,
        uint64 messageID,
        optional(int8) to
    ) public minValue(Gas.CHANGE_REPUTATION_VALUE) onlyOwner onlyJoined(serverID, address(0)) {
        require(!to.hasValue() || math.abs(to.get()) == 1, ErrorCodes.INVALID_REPUTATION_VALUE);
        _reserve();
        int8 change = 0;
        optional(int8) from = _votes[serverID][roomID].fetch(messageID);
        if (!from.hasValue() && to.hasValue()) {
            // null -> up/down
            int8 value = to.get();
            _votes[serverID][roomID][messageID] = value;
            change = value;
        } else if (from.hasValue() && !to.hasValue()) {
            // up/down -> null
            delete _votes[serverID][roomID][messageID];
            change = -from.get();
        } else if (from.hasValue() && to.hasValue() && from.get() != to.get()) {
            // up/down -> down/up
            int8 value = to.get();
            _votes[serverID][roomID][messageID] = value;
            change = 2 * value;
        } else {
            // unchanged
            revert(ErrorCodes.INVALID_REPUTATION_VALUE);
        }
        emit ChangeReputation(serverID, roomID, messageID, change);
        address message = _messageAddress(serverID, roomID, messageID);
        Message(message).changeReputation{
            value: 0,
            flag: MsgFlag.ALL_NOT_RESERVED,
            bounce: true
        }(_owner, change);
    }

    function onReputationChanged(
        uint64 serverID,
        uint64 roomID,
        uint64 messageID,
        address user,
        int8 change
    ) public override onlyMessage(serverID, roomID, messageID) onlyJoined(serverID, user) {
        _reserve();
        address server = _serverAddress(serverID);
        ForumUserData userData = _getUserData(server);
        userData.reputation += change;
        _userDatas[server] = abi.encode(userData);
        int64 current = userData.reputation;
        emit ReputationChanged(serverID, roomID, messageID, user, change, current);
        IForumUser(user).onReputationChanged{
            value: 0,
            flag: MsgFlag.ALL_NOT_RESERVED,
            bounce: false
        }(serverID, change, current);
    }

    function changeServerInfo(
        uint64 serverID,
        ForumInfo info
    ) public view minValue(Gas.PROFILE_PROXY_VALUE) onlyOwner onlyJoined(serverID, address(0)) {
        _reserve();
        emit ChangeServerInfo(serverID);
        address server = _serverAddress(serverID);
        CallData data = _buildCallData(server, null);
        Forum(server).changeInfo{
            value: 0,
            flag: MsgFlag.ALL_NOT_RESERVED,
            bounce: true
        }(data, info);
    }

    function changeRoomInfo(
        uint64 serverID,
        uint64 roomID,
        TopicInfo info
    ) public view minValue(Gas.PROFILE_PROXY_VALUE) onlyOwner onlyJoined(serverID, address(0)) {
        _reserve();
        emit ChangeRoomInfo(serverID, roomID);
        address room = _roomAddress(serverID, roomID);
        CallData data = _buildCallData(room, null);
        Topic(room).changeInfo{
            value: 0,
            flag: MsgFlag.ALL_NOT_RESERVED,
            bounce: true
        }(data, info);
    }


    function _getUserData(address server) private view returns (ForumUserData) {
        if (!_userDatas.exists(server)) {
            return _defaultUserData();
        } else {
            return abi.decode(_userDatas[server], ForumUserData);
        }
    }

    function _defaultUserData() private pure returns (ForumUserData) {
        return ForumUserData({reputation: 0});
    }

    function _encodeContractData() internal override returns (TvmCell) {
        return abi.encode(
            _owner, _meta, _sendMessageValue, _minTagValue, _pubkeys,
            _servers, _userDatas, _permissions, _currentMessageHash, _timestamp,
            _reactions, _votes
        );
    }

}
