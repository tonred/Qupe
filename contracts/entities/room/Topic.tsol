pragma ever-solidity ^0.66.0;

pragma AbiHeader time;
pragma AbiHeader expire;
pragma AbiHeader pubkey;

import "../../structures/Infos.tsol";
import "../abstract/Room.tsol";


contract Topic is Room {

    TopicInfo _info;
    TvmCell _messageCode;


    function _init(TvmCell params) internal override returns (address owner) {
        (owner, _info, _messageCode) = abi.decode(params, (address, TopicInfo, TvmCell));
        Permissions defaultPermissions = PermissionsLibrary.single(Action.SEND_MESSAGE);
        _initPermissions(owner, defaultPermissions);
    }

    function changeInfo(CallData data, TopicInfo info) public cashBack hasPermission(data, Action.CONFIG) {
        _info = info;
    }


    function _checkAcceptMessageData(CallData data, bool highlight) internal view override returns (bool) {
        Payment price = highlight ? _info.highlightMessagePayment : _info.messagePayment;
        if (!data.payment.moreThan(price)) {
            return false;
        }
        if (!data.userData.hasValue()) {
            return false;
        }
        UserData userData = data.userData.get();
        return userData.reputation >= _info.messageReputation;
    }

    function _acceptMessage(CallData data, uint messageHash, bool highlight) internal override {
        uint128 additional = Gas.ACCEPT_MESSAGE_FEE + data.payment.evers();
        tvm.rawReserve(additional, 4);
        uint64 messageID = _messagesCount++;
        emit MessageAccepted(messageID, messageHash, highlight);

        TvmCell stateInit = _buildMessageStateInit(_serverID, _roomID, messageID);
        TvmCell params = abi.encode(messageHash, data.user);
        new Platform{
            stateInit: stateInit,
            value: Gas.DEPLOY_MESSAGE_VALUE,
            flag: MsgFlag.SENDER_PAYS_FEES,
            bounce: false
        }(_messageCode, params);
        msg.sender.transfer({value: 0, flag: MsgFlag.ALL_NOT_RESERVED, bounce: false});
    }

}
