pragma ever-solidity ^0.66.0;

import "../../payment/PaymentLibrary.tsol";
import "../../structures/Tag.tsol";
import "./interfaces/IProfile.tsol";
import "./Base.tsol";


abstract contract Room is Base {
    using PaymentLibrary for Payment;

    event MessageAccepted(uint64 messageID, uint messageHash);
    event SetBan(address user, bool isBan);

    uint64 _serverID;
    uint64 _roomID;

    uint64 _messagesCount;


    function onCodeUpgrade(address root, TvmCell platformCode, TvmCell initialData, TvmCell initialParams) internal {
        tvm.resetStorage();
        _initPlatform(root, platformCode);
        (_serverID, _roomID) = abi.decode(initialData, (uint64, uint64));
        (address owner, address token, optional(Permissions) ownerPermissions) = _init(initialParams);
        _initVault(token);

        _reserveTarget();
        address profile = _profileAddress(owner);
        IProfile(profile).onRoomCreated{
            value: 0,
            flag: MsgFlag.ALL_NOT_RESERVED,
            bounce: false
        }(_serverID, _roomID, ownerPermissions);
    }

    function _init(TvmCell params) internal virtual returns (
        address owner, address token, optional(Permissions) ownerPermissions
    );


    function acceptMessage(
        CallData data,
        uint messageHash,
        Tag[] tags,
        TvmCell properties
    ) public hasPermission(data, Action.SEND_MESSAGE) {
        require(_checkAcceptMessageData(data, properties), ErrorCodes.INVALID_MESSAGE_DATA);
        _acceptMessage(data, messageHash, tags);
    }

    function forceChangePermissions(
        uint64 serverID,
        address[] usersList,
        optional(Permissions)[] permissionsList,
        Permissions defaultPermissions,
        address callbackTo
    ) public onlyServer(serverID) {
        _reserve();
        for (uint i = 0; i < usersList.length; i++) {
            _setPermissions(usersList[i], permissionsList[i], callbackTo);
        }
        _defaultPermissions = defaultPermissions;
        IUser(callbackTo).onForceChangePermissions{value: 0, flag: MsgFlag.ALL_NOT_RESERVED, bounce: false}(serverID, _roomID);
    }

    function setBan(CallData data, address user, bool isBan) public view hasPermission(data, Action.BAN_UNBAN) {
        _reserve();
        emit SetBan(user, isBan);
        address profile = _profileAddress(user);
        IProfile(profile).onSetBan{
            value: 0,
            flag: MsgFlag.ALL_NOT_RESERVED,
            bounce: true
        }(_serverID, _roomID, isBan, data.user);
    }


    function _onAcceptTokensTransfer(uint128 amount, address sender, TvmCell payload) internal override {
        (CallData data, uint messageHash, Tag[] tags, TvmCell properties) =
            abi.decode(payload, (CallData, uint, Tag[], TvmCell));
        bool correct_sender = _checkSender(sender, data.user);
        bool has_permission = _checkPermissions(data, Action.SEND_MESSAGE);
        bool correct_data = _checkAcceptMessageData(data, properties);
        if (!correct_sender || !has_permission || !correct_data) {
            _returnTokens(amount, sender);
            return;
        }
        _acceptMessage(data, messageHash, tags);
    }

    function _checkAcceptMessageData(CallData data, TvmCell properties) internal view virtual returns (bool);

    function _acceptMessage(CallData data, uint messageHash, Tag[] tags) internal virtual {
        uint64 messageID = _acceptMessageBase(data, messageHash, tags);
        IProfile(msg.sender).onMessageAccepted{
            value: 0,
            flag: MsgFlag.ALL_NOT_RESERVED,
            bounce: false
        }(_serverID, _roomID, messageID, messageHash, false);
    }

    function _acceptMessageBase(CallData data, uint messageHash, Tag[] tags) internal returns (uint64) {
        uint128 additional = Gas.ACCEPT_MESSAGE_FEE + data.payment.evers();
        tvm.rawReserve(additional, 4);
        uint64 messageID = _messagesCount++;
        emit MessageAccepted(messageID, messageHash);
        for (Tag tag : tags) {
            address profile = _profileAddress(tag.user);
            IProfile(profile).onTagged{
                value: tag.value,
                flag: MsgFlag.SENDER_PAYS_FEES,
                bounce: true
            }(_serverID, _roomID, messageID, data.user);
        }
        return messageID;
    }

    function _setPermissions(address user, optional(Permissions) permissions, address callbackTo) internal override {
        address profile = _profileAddress(user);
        IProfile(profile).setRoomPermissions{
            value: Gas.SET_PERMISSION_VALUE,
            flag: MsgFlag.SENDER_PAYS_FEES,
            bounce: false
        }(_serverID, _roomID, permissions, callbackTo);
    }

    function _reserveTarget() internal view inline override {
        tvm.rawReserve(Gas.ROOM_TARGET_BALANCE, 0);
    }

}
