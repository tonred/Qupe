pragma ever-solidity ^0.66.0;

import "../../structures/UserData.tsol";
import "../interfaces/IProfile.tsol";
import "./Base.tsol";

pragma AbiHeader time;
pragma AbiHeader expire;
pragma AbiHeader pubkey;


abstract contract Room is Base {
    event MessageAccepted(uint64 messageID, uint messageHash, bool highlight);
    // todo deletion

    uint64 _serverID;
    uint64 _roomID;

    mapping(address => bool) _bans;
    uint64 _messagesCount;


    function onCodeUpgrade(address root, TvmCell platformCode, TvmCell initialData, TvmCell initialParams) internal {
        tvm.resetStorage();
        _initPlatform(root, platformCode);
        (_serverID, _roomID) = abi.decode(initialData, (uint64, uint64));
        address owner = _init(initialParams);
        _withdrawEvers(owner);
    }

    function _init(TvmCell params) internal virtual override returns (address owner);


    function acceptMessage(
        CallData data,
        uint messageHash,
        bool highlight
    ) public hasPermission(data, Action.SEND_MESSAGE) {
        require(_checkAcceptMessageData(data, highlight), 69);
        _acceptMessage(messageHash, highlight, data.user);
    }

    function ban(CallData data, address user) public hasPermission(data, Action.BAN_UNBAN) {
        _setPermissions(user, PermissionsLibrary.none(), data.user);
    }

    function unban(CallData data, address user) public hasPermission(data, Action.BAN_UNBAN) {
        _setPermissions(user, null, data.user);
    }

    // todo manageRoom
//    function changeParams(
//        uint64 serverID,
//        TvmCell params,
//        bool resetPermissions,
//        address remainingGasTo
//    ) public onlyServer(serverID) {
//        _reserve();
//        address owner = _init(params);
//        if (resetPermissions) {
//            _resetPermissions(owner);
//        }
//        remainingGasTo.transfer({value: 0, flag: MsgFlag.ALL_NOT_RESERVED, bounce: false});
//    }


    function _onAcceptTokensTransfer(uint128 amount, address sender, TvmCell payload) internal override {
        (CallData data, uint messageHash, bool highlight) =
            abi.decode(payload, (CallData, uint, bool));
        bool correct_sender = _checkSender(sender, data.user);
        bool has_permission = _checkPermissions(data, Action.SEND_MESSAGE);
        bool correct_data = _checkAcceptMessageData(data, highlight);
        if (!correct_sender || !has_permission || !correct_data) {
            _returnTokens(amount, sender);
            return;
        }
        _acceptMessage(messageHash, highlight, sender);
    }

    function _checkAcceptMessageData(CallData data, bool highlight) internal view virtual returns (bool);

    function _acceptMessage(uint messageHash, bool highlight, address /*user*/) internal virtual {
        uint64 messageID = _messagesCount++;
        emit MessageAccepted(messageID, messageHash, highlight);
        // todo return gas
    }

    function _setPermissions(address user, optional(Permissions) permissions, address remainingGasTo) internal override {
        address profile = _profileAddress(user);
        IProfile(profile).setRoomPermissions{
            value: Gas.SET_PERMISSION_VALUE,
            flag: MsgFlag.SENDER_PAYS_FEES,
            bounce: false
        }(_serverID, _roomID, permissions, remainingGasTo);
    }

    function _reserveTarget() internal view inline override {
        tvm.rawReserve(Gas.ROOM_TARGET_BALANCE, 0);
    }

}
