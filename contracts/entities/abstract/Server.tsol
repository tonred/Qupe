pragma ever-solidity ^0.66.0;

pragma AbiHeader time;
pragma AbiHeader expire;
pragma AbiHeader pubkey;

import "./Room.tsol";


abstract contract Server is Base {
    event RoomCreated(uint64 roomID, address room, address creator);

    uint64 _serverID;

    TvmCell _roomCode;
    uint64 _roomsCount;


    function onCodeUpgrade(address root, TvmCell platformCode, TvmCell initialData, TvmCell initialParams) internal {
        tvm.resetStorage();
        _initPlatform(root, platformCode);
        _serverID = abi.decode(initialData, uint64);
        _init(initialParams);
    }

    function _init(TvmCell params) internal virtual override;


    function createRoom(CallData data, TvmCell params) public hasPermission(data, Action.CREATE_ROOM) {
        require(_checkCreateRoomData(data), 69);
        _createRoom(params, msg.sender);
    }

    // todo
//    function changeRoomParams(
//        TvmCell params,
//        bool resetPermissions,
//        uint64 roomID
//    ) public minValue(Gas.CALL_VALUE) onlyAdmin {
//        address room = _roomAddress(_serverID, roomID);
//        Room(room).changeParams{
//            value: 0,
//            flag: MsgFlag.REMAINING_GAS,
//            bounce: false
//        }(_serverID, params, resetPermissions, msg.sender);
//    }


    function _onAcceptTokensTransfer(uint128 amount, address sender, TvmCell payload) internal override {
        (CallData data, TvmCell params) = abi.decode(payload, (CallData, TvmCell));
        bool correct_sender = _checkSender(sender, data.user);
        bool has_permission = _checkPermissions(data, Action.CREATE_ROOM);
        bool correct_data = _checkCreateRoomData(data);
        if (!correct_sender || !has_permission || !correct_data) {
            _returnTokens(amount, sender);
            return;
        }
        _createRoom(params, sender);
    }

    function _checkCreateRoomData(CallData data) internal view virtual returns (bool);

    function _createRoom(TvmCell params, address creator) internal {
        uint64 roomID = _roomsCount++;
        TvmCell stateInit = _buildRoomStateInit(_serverID, roomID);
        params = _buildCreateRoomInitialParams(params, creator);
        address room = new Platform{
            stateInit: stateInit,
            value: Gas.ROOM_VALUE,
            flag: MsgFlag.SENDER_PAYS_FEES,
            bounce: false
        }(_roomCode, params);
        emit RoomCreated(roomID, room, creator);
        // todo return gas
    }

    function _buildCreateRoomInitialParams(TvmCell params, address /*creator*/) internal view virtual returns (TvmCell);

    function _setPermissions(address user, optional(Permissions) permissions) internal override {
        address profile = _profileAddress(user);
        IProfile(profile).setServerPermissions{
            value: 0,
            flag: MsgFlag.REMAINING_GAS,
            bounce: false
        }(_serverID, permissions);
    }

    function _targetBalance() internal view inline override returns (uint128) {
        return Gas.SERVER_TARGET_BALANCE;
    }

}
