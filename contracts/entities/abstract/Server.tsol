pragma ever-solidity ^0.66.0;

import "./Room.tsol";


abstract contract Server is Base {
    event Joined(address user);
    event RoomCreated(uint64 roomID, address room, address creator);

    uint64 _serverID;

    TvmCell _roomCode;
    uint64 _roomsCount;
    uint64 _usersCount;


    function onCodeUpgrade(TvmCell input, bool upgrade) internal override {
        if (!upgrade) {
            tvm.resetStorage();
            (address root, TvmCell platformCode, TvmCell initialData, TvmCell initialParams) =
                abi.decode(input, (address, TvmCell, TvmCell, TvmCell));

            _initPlatform(root, platformCode);
            _serverID = abi.decode(initialData, uint64);
            _usersCount = 1;  // creator
            (address owner, address token, optional(Permissions) ownerPermissions) = _init(initialParams);
            _initVault(token);
            _initVersion(Constants.SERVER_SID, Version(1, 1));

            _reserveTarget();
            address profile = _profileAddress(owner);
            IProfile(profile).onServerCreated{
                value: 0,
                flag: MsgFlag.ALL_NOT_RESERVED,
                bounce: false
            }(_serverID, ownerPermissions);
        } else {
            revert(VersionableErrorCodes.INVALID_OLD_VERSION);
        }
    }

    function _init(TvmCell params) internal virtual returns (
        address owner, address token, optional(Permissions) ownerPermissions
    );


    function join(uint64 /*serverID*/, address user) public {
        _reserve();
        address profile = msg.sender;
        require(_checkSender(profile, user), ErrorCodes.SENDER_IS_NOT_PROFILE);
        _usersCount += 1;
        emit Joined(user);
        IProfile(profile).onJoined{
            value: 0,
            flag: MsgFlag.ALL_NOT_RESERVED,
            bounce: false
        }(_serverID);
    }

    function createRoom(CallData data, TvmCell params) public hasPermission(data, Action.CREATE_ROOM) {
        require(_checkCreateRoomData(data), ErrorCodes.INVALID_DATA);
        _createRoom(params, msg.sender);
    }

    function forceChangeRoomPermissions(
        CallData data,
        uint64 roomID,
        address[] usersList,
        optional(Permissions)[] permissionsList,
        Permissions defaultPermissions
    ) public view hasPermission(data, Action.ADMIN) {
        address room = _roomAddress(_serverID, roomID);
        Room(room).forceChangePermissions{
            value: 0,
            flag: MsgFlag.REMAINING_GAS,
            bounce: false
        }(_serverID, usersList, permissionsList, defaultPermissions, data.user);
    }


    function _onAcceptTokensTransfer(uint128 amount, address sender, TvmCell payload) internal override {
        (CallData data, TvmCell params) = abi.decode(payload, (CallData, TvmCell));
        bool correct_sender = _checkSender(sender, data.user);
        bool has_permission = _checkPermissions(data, Action.CREATE_ROOM);
        bool correct_data = _checkCreateRoomData(data);
        if (!correct_sender || !has_permission || !correct_data) {
            _returnTokens(amount, sender);
            return;
        }
        _createRoom(params, sender);
    }

    function _checkCreateRoomData(CallData data) internal view virtual returns (bool);

    function _createRoom(TvmCell params, address creator) internal {
        _reserve();
        uint64 roomID = _roomsCount++;
        TvmCell stateInit = _buildRoomStateInit(_serverID, roomID);
        params = _buildCreateRoomInitialParams(params, creator);
        address room = new Platform{
            stateInit: stateInit,
            value: 0,
            flag: MsgFlag.ALL_NOT_RESERVED,
            bounce: false
        }(_roomCode, params);
        emit RoomCreated(roomID, room, creator);
    }

    function _buildCreateRoomInitialParams(TvmCell params, address /*creator*/) internal view virtual returns (TvmCell);

    function _setPermissions(address user, optional(Permissions) permissions, address callbackTo) internal override {
        address profile = _profileAddress(user);
        IProfile(profile).setServerPermissions{
            value: Gas.SET_PERMISSION_VALUE,
            flag: MsgFlag.SENDER_PAYS_FEES,
            bounce: false
        }(_serverID, permissions, callbackTo);
    }

    function _reserveTarget() internal view inline override {
        tvm.rawReserve(Gas.SERVER_TARGET_BALANCE, 0);
    }

}
