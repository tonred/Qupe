pragma ever-solidity ^0.66.0;

import "../../permissions/PermissionsLibrary.tsol";
import "../../platform/PlatformUtils.tsol";
import "../../structures/CallData.tsol";
import "../../utils/TransferUtils.tsol";
import "../../vault/Vault.tsol";
import "./interfaces/IUser.tsol";


abstract contract Base is Vault, PlatformUtils, TransferUtils {
    using PermissionsLibrary for Permissions;

    Permissions _defaultPermissions;

    modifier hasPermission(CallData data, Action action) {
        require(_checkSender(msg.sender, data.user), 69);
        require(_checkPermissions(data, action), 69);
        _;
    }

    function _init(TvmCell params) internal virtual returns (address owner, address token);


    function withdraw(CallData data, address token, address recipient) public hasPermission(data, Action.ADMIN) {
        if (token.value == 0) {
            _withdrawEvers(recipient, tvm.functionId(IUser.onEntityWithdraw));
        } else if (token == _token) {
            TvmCell empty;
            _transferTokens(_balance, recipient, empty, 0, MsgFlag.REMAINING_GAS);
        } else {
            revert(69);
        }
    }

    function setPermissions(
        CallData data,
        address user,
        optional(Permissions) permissions
    ) public hasPermission(data, Action.ADMIN) {
        if (permissions.hasValue()) {
            require(permissions.get().validate(), 69);
        }
        _setPermissions(user, permissions, data.user);
    }

    function setDefaultPermissions(CallData data, Permissions permissions) public cashBack hasPermission(data, Action.ADMIN) {
        require(permissions.validate(), 69);
        _defaultPermissions = permissions;
    }


    function _initPermissions(address owner, Permissions defaultPermissions) internal {
        _defaultPermissions = defaultPermissions;
        if (owner.value != 0) {
            _setPermissions(owner, PermissionsLibrary.full(), owner);
        }
    }

    function _checkSender(address sender, address user) internal view returns (bool) {
        address profile = _profileAddress(user);
        return sender == profile;
    }

    function _checkPermissions(CallData data, Action action) internal view returns (bool) {
        Permissions permissions = data.permissions.hasValue() ? data.permissions.get() : _defaultPermissions;
        return permissions.check(action);
    }

    function _withdrawEvers(address recipient, uint32 callbackFunctionID) internal view {
        _reserveTarget();
        recipient.transfer({
            value: 0,
            flag: MsgFlag.ALL_NOT_RESERVED,
            bounce: false,
            body: abi.encode(callbackFunctionID)
        });
    }

    function _setPermissions(address user, optional(Permissions) permissions, address remainingGasTo) internal virtual;

    function _reserveTarget() internal view inline virtual;

}
