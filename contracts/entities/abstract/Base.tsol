pragma ever-solidity ^0.66.0;

import "../../permissions/PermissionsLibrary.tsol";
import "../../platform/PlatformUtils.tsol";
import "../../structures/CallData.tsol";
import "../../utils/TransferUtils.tsol";
import "../../vault/Vault.tsol";
import "./interfaces/IUser.tsol";

import {BaseSlave, Version, ErrorCodes as VersionableErrorCodes} from "versionable/contracts/BaseSlave.tsol";


abstract contract Base is Vault, PlatformUtils, TransferUtils, BaseSlave {
    using PermissionsLibrary for Permissions;

    Permissions _defaultPermissions;

    modifier hasPermission(CallData data, Action action) {
        require(_checkSender(msg.sender, data.user), ErrorCodes.SENDER_IS_NOT_PROFILE);
        require(_checkPermissions(data, action), ErrorCodes.NO_PERMISSION_FOR_ACTION);
        _;
    }


    function withdraw(CallData data, address token, address recipient) public hasPermission(data, Action.ADMIN) {
        if (token.value == 0) {
            _withdrawEvers(recipient);
        } else if (token == _token) {
            TvmCell empty;
            _transferTokens(_balance, recipient, empty, 0, MsgFlag.REMAINING_GAS);
        } else {
            revert(ErrorCodes.NOT_NATIVE_OR_STORED_TOKEN);
        }
    }

    function setPermissions(
        CallData data,
        address user,
        optional(Permissions) permissions
    ) public hasPermission(data, Action.ADMIN) {
        _setPermissions(user, permissions, data.user);
    }

    function setDefaultPermissions(CallData data, Permissions permissions) public cashBack hasPermission(data, Action.ADMIN) {
        _defaultPermissions = permissions;
    }


    function _initPermissions(Permissions defaultPermissions) internal {
        _defaultPermissions = defaultPermissions;
    }

    function _checkSender(address sender, address user) internal view returns (bool) {
        address profile = _profileAddress(user);
        return sender == profile;
    }

    function _checkPermissions(CallData data, Action action) internal view returns (bool) {
        Permissions permissions = data.permissions.hasValue() ? data.permissions.get() : _defaultPermissions;
        return permissions.check(action);
    }

    function _withdrawEvers(address recipient) private view {
        _reserveTarget();
        IUser(recipient).onWithdrawEvers{
            value: 0,
            flag: MsgFlag.ALL_NOT_RESERVED,
            bounce: false
        }();
    }

    function _setPermissions(address user, optional(Permissions) permissions, address callbackTo) internal virtual;

    function _reserveTarget() internal view inline virtual;


    function acceptUpgrade(
        uint16 sid, Version version, TvmCell code, TvmCell params, address caller, TvmCell meta
    ) public override onlyRoot {
        (CallData data, bool force) = abi.decode(meta, (CallData, bool));
        bool correct_sender = _checkSender(caller, data.user);
        bool has_permission = _checkPermissions(data, Action.CONFIG);
        require(correct_sender && has_permission && !force, ErrorCodes.NO_PERMISSION_FOR_ACTION);
        _acceptUpgrade(sid, version, code, params, caller, meta);
    }

    function _onCodeUpgrade(TvmCell data, Version oldVersion, TvmCell params, address caller, TvmCell meta) internal override {
        TvmCell input = abi.encode(data, oldVersion, params, caller, meta);
        onCodeUpgrade(input, true);
    }

    function onCodeUpgrade(TvmCell input, bool upgrade) internal virtual;

}
