pragma ever-solidity ^0.66.0;

import "../../utils/Constants.tsol";
import "../../vault/MultiVault.tsol";
import "./Server.tsol";


abstract contract Profile is IProfile, MultiVault, PlatformUtils, TransferUtils {
    using PaymentLibrary for Payment;
    using PermissionsLibrary for optional(Permissions);

    event Join(uint64 serverID);
    event CreateRoom(uint64 serverID);
    event SendMessage(uint messageHash, uint64 serverID, uint64 roomID);

    event ServerCreated(uint64 serverID);
    event RoomCreated(uint64 serverID, uint64 roomID);
    event Joined(uint64 serverID);
    event CreateWallet(address token);
    event SyncWallet(address token);
    event Deposited(address token, uint128 amount);
    event Withdrawn(address token, uint128 amount, address recipient);
    event PermissionChanged(address entity, bool removed);
    event Tagged(uint64 serverID, uint64 roomID, uint64 messageID, address user);
    event MessageAccepted(uint messageHash, uint64 serverID, uint64 roomID, uint64 messageID, bool deployed);

    // in implementation
    event ChangeServerInfo(uint64 serverID);
    event ChangeRoomInfo(uint64 serverID, uint64 roomID);


    address _owner;

    bytes _meta;
    uint128 _sendMessageValue;
    uint128 _minTagValue;
    mapping(uint => bool) _pubkeys;

    mapping(uint64 => bool) _servers;
    mapping(address => TvmCell) _userDatas;
    mapping(address => Permissions) _permissions;
    uint _currentMessageHash;
    uint64 _timestamp;


    modifier onlyOwner() {
        require(msg.sender == _owner, ErrorCodes.IS_NOT_OWNER);
        _;
    }

    modifier onlyJoined(uint64 serverID, address callbackTo) {
        if (_servers[serverID]) {
            if (callbackTo.value == 0) {
                revert(ErrorCodes.IS_NOT_JOINED_TO_SEVER);
            }
            IUser(callbackTo).onErrorNotJoined{
                value: 0,
                flag: MsgFlag.REMAINING_GAS,
                bounce: false
            }(serverID, _owner);
            return;
        }
        _;
    }


    function onCodeUpgrade(address root, TvmCell platformCode, TvmCell initialData, TvmCell initialParams) internal {
        tvm.resetStorage();
        _initPlatform(root, platformCode);
        _owner = abi.decode(initialData, address);
        uint[] pubkeys;
        (_meta, _sendMessageValue, _minTagValue, pubkeys) = abi.decode(initialParams, (bytes, uint128, uint128, uint[]));
        _setPubkeys(pubkeys);
    }

    function afterSignatureCheck(TvmSlice body, TvmCell message) private inline returns (TvmSlice) {
        uint64 maxTimestamp = uint64(now + 30) * 1000;
        uint64 msgTimestamp = body.decode(uint64);
        require(msgTimestamp > _timestamp && msgTimestamp <= maxTimestamp, ErrorCodes.EXTERNAL_MESSAGE_REPLAY);
        _timestamp = msgTimestamp;

        uint32 expireAt = body.decode(uint32);
        require(expireAt >= now, ErrorCodes.EXTERNAL_MESSAGE_EXPIRED);

        uint pubkey = msg.pubkey();
        require(_pubkeys.exists(pubkey) && pubkey != 0, ErrorCodes.WRONG_PUBLIC_KEY);

        uint messageHash = tvm.hash(message);
        require(messageHash != _currentMessageHash, ErrorCodes.MESSAGE_ALREADY_PROCESSED);
        _currentMessageHash = messageHash;
        return body;
    }


    function getServers() public view responsible returns (uint64[] serverIDs) {
        for ((uint64 serverID, bool joined) : _servers) {
            if (joined) {
                serverIDs.push(serverID);
            }
        }
        return {value: 0, flag: MsgFlag.REMAINING_GAS, bounce: false} serverIDs;
    }

    function getPermissions(address entity) public view responsible returns (Permissions permissions) {
        return {value: 0, flag: MsgFlag.REMAINING_GAS, bounce: false} _permissions[entity];
    }


    function join(uint64 serverID) public minValue(Gas.JOIN_VALUE) onlyOwner {
        require(!_servers.exists(serverID), ErrorCodes.IS_ALREADY_JOINED_TO_SERVER);
        _reserve();
        _servers[serverID] = false;
        emit Join(serverID);
        address server = _serverAddress(serverID);
        Server(server).join{
            value: 0,
            flag: MsgFlag.ALL_NOT_RESERVED,
            bounce: true
        }(serverID, _owner);
    }

    function withdrawFrom(
        address entity,
        address token,
        address recipient
    ) public view minValue(Gas.PROFILE_PROXY_VALUE) onlyOwner {
        CallData data = _buildCallData(entity, null);
        Base(entity).withdraw{
            value: 0,
            flag: MsgFlag.REMAINING_GAS,
            bounce: true
        }(data, token, recipient);
    }

    function setPermissions(
        address entity,
        address user,
        optional(Permissions) permissions
    ) public view minValue(Gas.PROFILE_PROXY_VALUE) onlyOwner {
        require(permissions.validate(), ErrorCodes.PERMISSIONS_NOT_VALID);
        CallData data = _buildCallData(entity, null);
        Base(entity).setPermissions{
            value: 0,
            flag: MsgFlag.REMAINING_GAS,
            bounce: true
        }(data, user, permissions);
    }

    function setDefaultPermissions(
        address entity,
        Permissions permissions
    ) public view minValue(Gas.PROFILE_PROXY_VALUE) onlyOwner {
        require(PermissionsLibrary.validate(permissions), ErrorCodes.PERMISSIONS_NOT_VALID);
        CallData data = _buildCallData(entity, null);
        Base(entity).setDefaultPermissions{
            value: 0,
            flag: MsgFlag.REMAINING_GAS,
            bounce: true
        }(data, permissions);
    }

    function forceChangeRoomPermissions(
        uint64 serverID,
        uint64 roomID,
        address[] usersList,
        optional(Permissions)[] permissionsList,
        Permissions defaultPermissions
    ) public view cashBack onlyOwner onlyJoined(serverID, address(0)) {
        require(usersList.length == permissionsList.length, ErrorCodes.PERMISSIONS_NOT_VALID);
        for (optional(Permissions) permissions : permissionsList) {
            require(PermissionsLibrary.validate(permissions), ErrorCodes.PERMISSIONS_NOT_VALID);
        }
        uint128 value = uint128(usersList.length) * Gas.SET_PERMISSION_VALUE + Gas.PROFILE_PROXY_VALUE;
        address server = _serverAddress(serverID);
        CallData data = _buildCallData(server, null);
        Server(server).forceChangeRoomPermissions{
            value: value,
            flag: MsgFlag.SENDER_PAYS_FEES,
            bounce: true
        }(data, roomID, usersList, permissionsList, defaultPermissions);
    }

    function ban(
        uint64 serverID,
        uint64 roomID,
        address user
    ) public view minValue(Gas.PROFILE_PROXY_VALUE) onlyOwner onlyJoined(serverID, address(0)) {
        address room = _roomAddress(serverID, roomID);
        CallData data = _buildCallData(room, null);
        Room(room).ban{
            value: 0,
            flag: MsgFlag.REMAINING_GAS,
            bounce: true
        }(data, user);
    }

    function unban(
        uint64 serverID,
        uint64 roomID,
        address user
    ) public view minValue(Gas.PROFILE_PROXY_VALUE) onlyOwner onlyJoined(serverID, address(0)) {
        address room = _roomAddress(serverID, roomID);
        CallData data = _buildCallData(room, null);
        Room(room).unban{
            value: 0,
            flag: MsgFlag.REMAINING_GAS,
            bounce: true
        }(data, user);
    }

    function createWallet(address token) public minValue(Gas.CREATE_WALLET_VALUE) cashBack onlyOwner {
        emit CreateWallet(token);
        _createWallet(token, Gas.CALL_DEPLOY_WALLET_VALUE);
    }

    function syncWallet(address token) public minValue(Gas.CALL_VALUE) cashBack onlyOwner {
        emit SyncWallet(token);
        _sync(token);
    }

    function deposit() public pure minValue(Gas.MIN_DEPOSIT_VALUE) {
        emit Deposited(address(0), msg.value);
    }

    function withdraw(address token, uint128 amount, address recipient) public minValue(Gas.CALL_VALUE) onlyOwner {
        emit Withdrawn(token, amount, recipient);
        if (token.value == 0) {
            _reserveTarget();
            IUser(_owner).onWithdraw{
                value: amount,
                flag: MsgFlag.SENDER_PAYS_FEES,
                bounce: false
            }();
        } else if (_wallets.exists(token)) {
            _reserve();
            TvmCell empty;
            bool success = _transferTokens(token, amount, recipient, empty, 0, MsgFlag.REMAINING_GAS);
            require(success, ErrorCodes.ZERO_VALUE_OR_TOKEN_NOT_EXISTS);
        } else {
            revert(ErrorCodes.NOT_NATIVE_OR_STORED_TOKEN);
        }
    }

    function setMinTagValue(uint128 minTagValue) public cashBack onlyOwner {
        _minTagValue = minTagValue;
    }

    function setPubkeys(uint[] pubkeys) public cashBack onlyOwner {
        delete _pubkeys;
        _setPubkeys(pubkeys);
    }


    function onServerCreated(uint64 serverID, optional(Permissions) permissions) public override onlyServer(serverID) {
        _reserve();
        emit ServerCreated(serverID);
        _join(serverID);
        address server = _serverAddress(serverID);
        _setPermissions(server, permissions);
        IUser(_owner).onServerCreated{value: 0, flag: MsgFlag.ALL_NOT_RESERVED, bounce: false}(serverID);
    }

    function onRoomCreated(
        uint64 serverID,
        uint64 roomID,
        optional(Permissions) permissions
    ) public override onlyRoom(serverID, roomID) {
        _reserve();
        emit RoomCreated(serverID, roomID);
        address room = _roomAddress(serverID, roomID);
        _setPermissions(room, permissions);
        IUser(_owner).onRoomCreated{value: 0, flag: MsgFlag.ALL_NOT_RESERVED, bounce: false}(serverID, roomID);
    }

    function onJoined(uint64 serverID) public override onlyServer(serverID) {
        _reserve();
        _join(serverID);
        IUser(_owner).onJoined{value: 0, flag: MsgFlag.ALL_NOT_RESERVED, bounce: false}(serverID);
    }

    function setServerPermissions(
        uint64 serverID,
        optional(Permissions) permissions,
        address callbackTo
    ) public override onlyServer(serverID) onlyJoined(serverID, callbackTo) {
        _reserve();
        address server = _serverAddress(serverID);
        _setPermissions(server, permissions);
        IUser(callbackTo).onPermissionChanged{value: 0, flag: MsgFlag.ALL_NOT_RESERVED, bounce: false}(server, true);
    }

    function setRoomPermissions(
        uint64 serverID,
        uint64 roomID,
        optional(Permissions) permissions,
        address callbackTo
    ) public override onlyRoom(serverID, roomID) onlyJoined(serverID, callbackTo) {
        _reserve();
        address room = _roomAddress(serverID, roomID);
        _setPermissions(room, permissions);
        IUser(callbackTo).onPermissionChanged{value: 0, flag: MsgFlag.ALL_NOT_RESERVED, bounce: false}(room, false);
    }

    function onTagged(
        uint64 serverID,
        uint64 roomID,
        uint64 messageID,
        address user
    ) public view override onlyRoom(serverID, roomID) onlyJoined(serverID, user) {
        emit Tagged(serverID, roomID, messageID, user);
    }

    function onMessageAccepted(
        uint64 serverID,
        uint64 roomID,
        uint64 messageID,
        uint messageHash,
        bool deployed
    ) public view override {
        address sender = deployed ? _messageAddress(serverID, roomID, messageID) : _roomAddress(serverID, roomID);
        require(msg.sender == sender, ErrorCodes.SENDER_IS_NOT_ROOM);
        emit MessageAccepted(messageHash, serverID, roomID, messageID, deployed);
    }


    function _join(uint64 serverID) private inline {
        _servers[serverID] = true;
        emit Joined(serverID);
    }

    function _createRoom(uint64 serverID, TvmCell params, Payment payment) internal {
        uint128 minValue = Gas.CREATE_ROOM_VALUE + payment.evers();
        require(msg.value >= minValue, ErrorCodes.TOO_LOW_MESSAGE_VALUE);

        emit CreateRoom(serverID);
        address server = _serverAddress(serverID);
        CallData data = _buildCallData(server, payment);
        if (payment.isEver()) {
            _createRoomPayEver(server, data, params);
        } else {
            TvmCell payload = abi.encode(data, params);
            _executePayTIP3(payment, server, payload, Gas.CREATE_ROOM_VALUE);
        }
    }

    function _sendMessage(
        uint64 serverID,
        uint64 roomID,
        Tag[] tags,
        TvmCell properties,
        Payment payment
    ) internal {
        emit SendMessage(_currentMessageHash, serverID, roomID);
        address room = _roomAddress(serverID, roomID);
        CallData data = _buildCallData(room, payment);
        uint128 value = _sendMessageValue + payment.evers() + _sumTagsValue(tags);
        if (payment.isEver()) {
            _sendMessagePayEver(room, data, tags, properties, value);
        } else {
            TvmCell payload = abi.encode(data, _currentMessageHash, tags, properties);
            _executePayTIP3(payment, room, payload, value);
        }
    }

    function _buildCallData(address entity, optional(Payment) paymentOptional) internal view returns (CallData) {
        Payment payment = paymentOptional.hasValue() ? paymentOptional.get() : Payment(address(0), 0);
        optional(TvmCell) userData = _userDatas.fetch(entity);
        optional(Permissions) permissions = _permissions.fetch(entity);
        return CallData(_owner, payment, userData, permissions);
    }

    function _sumTagsValue(Tag[] tags) private pure returns (uint128 sum) {
        for (Tag tag : tags) {
            sum += tag.value + Gas.TAG_VALUE;
        }
    }

    function _createRoomPayEver(address server, CallData data, TvmCell params) private pure {
        Server(server).createRoom{
            value: Gas.CREATE_ROOM_VALUE + data.payment.evers(),
            flag: MsgFlag.SENDER_PAYS_FEES,
            bounce: true
        }(data, params);
    }

    function _sendMessagePayEver(address room, CallData data, Tag[] tags, TvmCell properties, uint128 value) private view {
        Room(room).acceptMessage{
            value: value,
            flag: MsgFlag.SENDER_PAYS_FEES,
            bounce: true
        }(data, _currentMessageHash, tags, properties);
    }

    function _executePayTIP3(Payment payment, address recipient, TvmCell payload, uint128 value) private {
        bool success = _transferTokens(payment.token, payment.amount, recipient, payload, value, MsgFlag.SENDER_PAYS_FEES);
        require(success, ErrorCodes.ZERO_VALUE_OR_TOKEN_NOT_EXISTS);
    }

    function _setPubkeys(uint[] pubkeys) private {
        for (uint pubkey : pubkeys) {
            _pubkeys[pubkey] = true;
        }
    }

    function _setPermissions(address entity, optional(Permissions) permissions) private {
        bool removed = !permissions.hasValue();
        emit PermissionChanged(entity, removed);
        if (removed) {
            delete _permissions[entity];
        } else {
            _permissions[entity] = permissions.get();
        }
    }

    function _onAcceptTokensTransfer(address token, uint128 amount, address /*sender*/, TvmCell /*payload*/) internal override {
        _reserve();
        emit Deposited(token, amount);
        IUser(_owner).onTokenDeposited{value: 0, flag: MsgFlag.ALL_NOT_RESERVED, bounce: false}(token, amount);
    }

    function _reserveTarget() internal pure {
        tvm.rawReserve(Gas.PROFILE_TARGET_BALANCE, 0);
    }


    onBounce(TvmSlice body) external {
        uint32 functionId = body.decode(uint32);
        if (functionId == tvm.functionId(Server.join)) {
            // server is not exists
            uint64 serverID = body.decode(uint64);
            delete _servers[serverID];
        }
    }

}
