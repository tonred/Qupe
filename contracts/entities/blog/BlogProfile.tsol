pragma ever-solidity ^0.66.0;

pragma AbiHeader time;
pragma AbiHeader expire;
pragma AbiHeader pubkey;

import "../abstract/Profile.tsol";
import "./Blog.tsol";


contract BlogProfile is Profile {

    function createRoom(uint64 serverID, Payment payment) public onlyOwner onlyJoined(serverID, address(0)) {
        TvmCell params;
        _createRoom(serverID, params, payment);
    }

    function sendMessage(
        uint8 version,
        uint64 serverID,
        uint64 roomID,
        bytes message,
        Tag[] tags,
        optional(uint) replyToMessageHash,
        optional(uint) forwardMessageHash,
        Payment payment
    ) public externalMsg onlyJoined(serverID, address(0)) {
        require(version == Constants.MESSAGE_VERSION, ErrorCodes.WRONG_MESSAGE_VERSION);
        if (forwardMessageHash.hasValue()) {
            // forward message doesn't have `message` and `replyToMessageHash`
            require(message.length == 0 && !replyToMessageHash.hasValue(), ErrorCodes.FORWARDED_MESSAGE_WITH_CONTENT);
        }
        tvm.accept();
        TvmCell properties;
        _sendMessage(serverID, roomID, tags, properties, payment);
    }

    function changeServerInfo(
        uint64 serverID,
        BlogInfo info
    ) public view minValue(Gas.PROFILE_PROXY_VALUE) onlyOwner {
        _reserve();
        emit ChangeServerInfo(serverID);
        address server = _serverAddress(serverID);
        CallData data = _buildCallData(server, null);
        Blog(server).changeInfo{
            value: 0,
            flag: MsgFlag.ALL_NOT_RESERVED,
            bounce: true
        }(data, info);
    }

}
