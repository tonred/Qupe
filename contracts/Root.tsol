pragma ever-solidity ^0.66.0;

pragma AbiHeader time;
pragma AbiHeader expire;
pragma AbiHeader pubkey;

import "./platform/PlatformUtils.tsol";
import "./structures/Codes.tsol";
import "./structures/Infos.tsol";
import "./utils/Gas.tsol";
import "./utils/TransferUtils.tsol";

import "@broxus/contracts/contracts/libraries/MsgFlag.tsol";
import "@broxus/contracts/contracts/utils/RandomNonce.tsol";


contract Root is PlatformUtils, RandomNonce {

    Codes _codes;
    uint64 _serversCount;

    constructor(Codes codes, TvmCell platformCode) public {
        tvm.accept();
        _codes = codes;
        _initPlatform(address(this), platformCode);
    }

    function getServersCount() public view responsible returns (uint64 count) {
        return {value: 0, flag: MsgFlag.REMAINING_GAS, bounce: false} _serversCount;
    }

    function createForum(address owner, ForumInfo info) public responsible returns (address) {
        _reserve();
        TvmCell params = abi.encode(owner, info, _codes.topic, _codes.message);
        return {value: 0, flag: MsgFlag.ALL_NOT_RESERVED, bounce: false} _createServer(_codes.forum, params);
    }

    function createChat(address owner, ChatInfo info) public responsible returns (address) {
        _reserve();
        TvmCell params = abi.encode(owner, info, _codes.channel);
        return {value: 0, flag: MsgFlag.ALL_NOT_RESERVED, bounce: false} _createServer(_codes.chat, params);
    }

    function createBlog(address owner, BlogInfo info) public responsible returns (address) {
        _reserve();
        TvmCell params = abi.encode(owner, info, _codes.page);
        return {value: 0, flag: MsgFlag.ALL_NOT_RESERVED, bounce: false} _createServer(_codes.blog, params);
    }

    function createProfile(uint[] pubkeys) public view responsible returns (address) {
        _reserve();
        TvmCell stateInit = _buildProfileStateInit(msg.sender);
        TvmCell params = abi.encode(pubkeys);
        return {value: 0, flag: MsgFlag.ALL_NOT_RESERVED, bounce: false} new Platform{
            stateInit: stateInit,
            value: Gas.DEPLOY_PROFILE_VALUE,
            flag: MsgFlag.SENDER_PAYS_FEES,
            bounce: false
        }(_codes.profile, params);
    }

    function _createServer(TvmCell code, TvmCell params) private returns (address) {
        uint64 serverID = _serversCount++;
        TvmCell stateInit = _buildServerStateInit(serverID);
        return new Platform{
            stateInit: stateInit,
            value: Gas.DEPLOY_SERVER_VALUE,
            flag: MsgFlag.SENDER_PAYS_FEES,
            bounce: false
        }(code, params);
    }

    function _reserve() internal pure virtual {
        tvm.rawReserve(Gas.ROOT_TARGET_VALUE, 0);
    }

}

// NFT
// edit/delete message
// rights
