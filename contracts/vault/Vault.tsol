pragma ever-solidity ^0.66.0;

import "./BaseVault.tsol";
import "./IVault.tsol";

import "tip3/contracts/interfaces/IBurnableTokenWallet.tsol";


abstract contract Vault is BaseVault, IVault {

    address _token;
    address _wallet;
    uint128 _balance;


    function _initVault(address token) internal {
        if (token.value == 0) {
            return;
        }
        _token = token;
        _deployWallet(token, Gas.DEPLOY_WALLET_VALUE);
    }

    function onWalletDeployed(address wallet) public override {
        require(msg.sender == _token && _token.value != 0, ErrorCodes.IS_NOT_TOKEN_ROOT);
        _wallet = wallet;
    }

    function getToken() public view responsible override returns (address token) {
        return {value: 0, flag: MsgFlag.REMAINING_GAS, bounce: false} _token;
    }

    function getWallet() public view responsible override returns (address wallet) {
        return {value: 0, flag: MsgFlag.REMAINING_GAS, bounce: false} _wallet;
    }

    function getBalance() public view responsible override returns (uint128 balance) {
        return {value: 0, flag: MsgFlag.REMAINING_GAS, bounce: false} _balance;
    }

    function onAcceptTokensTransfer(
        address /*tokenRoot*/,
        uint128 amount,
        address sender,
        address /*senderWallet*/,
        address /*remainingGasTo*/,
        TvmCell payload
    ) public override {
        if (msg.sender != _wallet || msg.sender.value == 0) {
            _returnTokens(amount, sender);
            return;
        }
        _balance += amount;
        _onAcceptTokensTransfer(amount, sender, payload);
    }

    // todo method to sync balance with wallet


    function _onAcceptTokensTransfer(uint128 amount, address sender, TvmCell payload) internal virtual;

    function _transferTokens(uint128 amount, address recipient, TvmCell payload, uint128 msgValue, uint8 msgFlag) internal {
        _balance -= amount;
        _transferTokensRaw(amount, recipient, payload, _wallet, msgValue, msgFlag);
    }

    function _burn(uint128 amount, address remainingGasTo) internal {
        if (_balance == 0) {
            return;
        }
        TvmCell empty;
        _balance -= amount;
        IBurnableTokenWallet(_wallet).burn{
            value: 0,
            flag: MsgFlag.ALL_NOT_RESERVED,
            bounce: true
        }({
            amount: amount,
            remainingGasTo: remainingGasTo,
            callbackTo: address(0),
            payload: empty
        });
    }

    onBounce(TvmSlice body) external {
        uint32 functionId = body.decode(uint32);
        if (functionId == tvm.functionId(IBurnableTokenWallet.burn)) {
            // burn is forbidden
            uint128 amount = body.decode(uint128);
            _balance += amount;
        }
    }

}
